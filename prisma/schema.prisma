datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id                           String                 @id @default(cuid())
  name                         String?
  password                     String?
  email                        String                 @unique
  emailVerified                DateTime?
  image                        String?
  accounts                     Account[]
  twoFactorEnabled             Boolean                @default(false)
  twoFactorConfirmation        TwoFactorConfirmation?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  twoFactorAuthenticationEmail String?
  twoFactorAuthenticationToken String?
  Course                       Course[]

  searchname Unsupported("tsvector")?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@id([email, token])
}

model PasswordResetToken {
  id      String   @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@id([email, token])
}

model TwoFactorToken {
  id      String   @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@id([email, token])
}

model TwoFactorConfirmation {
  id     String @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Course {
  id String @id @default(cuid())

  userId String
  user   User?  @relation(fields: [userId], references: [id])

  title       String
  description String?
  image       String?
  price       Float?
  isPublished Boolean @default(false)

  categoryId  Int?
  category    Category?     @relation(fields: [categoryId], references: [id])
  attachments Attachments[]
  Chapters    Chapter[]
  craeatedAt  DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Purchase    Purchase[]

  searchcourse Unsupported("tsvector")?

  @@index([categoryId])
}

model Category {
  id     Int      @id @default(autoincrement())
  title  String   @unique
  svg    String   @db.Text
  Course Course[]
}

model Attachments {
  id       String @id @default(cuid())
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  name     String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(cuid())
  name        String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  
  muxData      Mux?
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  UserProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Mux {
  id String @id @default(cuid())

  assedId    String
  playbackId String?
  Chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId  String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id     String @id @default(cuid())
  userId String

  isCompleted Boolean @default(false)

  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  userId   String @unique
  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}
